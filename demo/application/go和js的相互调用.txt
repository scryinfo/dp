前端程序多是从js发送消息给go，因为相应操作的时间节点多是由用户选择，而用户是和js对话的。

1.js -> go.√登录时的用户名下拉列表，内容来自keystore；
2.js -> go.√验证用户名和密码，js调用go的接口；
3.js -> go.√保存新建的账户信息，js调用go的接口，写入keystore；
4.js -> go.√数据列表显示，go获取列表，发送给js；在主页面的init函数里加载，后续如果需要刷新列表，可以在工具栏添加按钮；是从go直接拉取数据给js，还是go保存到本地数据库，js再从数据库拿数据？先直接传输数据，后面再使用数据库。
5.js -> go.√我的交易，go带数据过来；
6.js -> go.购买数据，js将选择的数据id发送给go，根据go的返回（成功与否），选择是否生成交易信息并保存到indexDB；
7.js -> go.发布数据，js将填写的数据信息发送给go，根据go的返回（成功与否），选择是否在本地数据库中添加数据。

8.go -> js.工具栏按钮，这一部分其实也可以做成js调用go，只是go-astilectron把它写在go里了；暂时先做这几个功能：更新数据列表、更新交易列表
  

没有打钩的几个点就需要引入数据库了,使用数据库改写4、5完成