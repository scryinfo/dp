syntax = "proto3";

package api;

service BinaryService {
    //subscribe event
    rpc SubscribeEvent(SubscribeInfo) returns (Result) {}

    //unsubscribe event
    rpc UnSubscribeEvent(SubscribeInfo) returns (Result) {}

    //receive events by creating a server stream channel
    rpc RecvEvents(ClientInfo) returns (stream Event) {}

    //publish
    rpc Publish(PublishParams) returns (PublishResult) {}

    //prepare to buy
    rpc PrepareToBuy(PrepareParams) returns (Result) {}

    //buy
    rpc BuyData(BuyParams) returns (Result) {}

    //cancel transaction
    rpc CancelTransaction(CancelTxParams) returns (Result) {}

    //decrypt with seller private key, then encrypt with buyer public key and arbitrators public key
    rpc ReEncryptMetaDataId(ReEncryptDataParams) returns (Result) {}

    //confirm data truth
    rpc ConfirmDataTruth(DataConfirmParams) returns (Result) {}

    //approve transfer
    rpc ApproveTransfer(ApproveTransferParams) returns (Result) {}

    //vote
    rpc Vote(VoteParams) returns (Result) {}

    //register as verifier
    rpc RegisterAsVerifier(RegisterVerifierParams) returns (Result) {}

    //credits to verifier
    rpc CreditsToVerifier(CreditVerifierParams) returns (Result) {}

    //transfer tokens
    rpc TransferTokens(TransferTokenParams) returns (Result) {}

    //get token balance
    rpc GetTokenBalance(TokenBalanceParams) returns (TokenBalanceResult) {}

    //create account
    rpc CreateAccount(CreateAccountParams) returns (AccountResult) {}

    //authenticate
    rpc Authenticate(ClientInfo) returns (Result) {}

    //transfer eth
    rpc TransferEth(TransferEthParams) returns (Result) {}

    //get eth balance
    rpc GetEthBalance(EthBalanceParams) returns (EthBalanceResult) {}
}

message CreateAccountParams {
    string password = 1;
}

message AccountResult {
    Result result = 2;
    string accountId = 1;
}

message TransferEthParams {
    string from = 1;
    string password = 2;
    string to = 3;
    int64  value = 4;
}

message EthBalanceParams {
    string owner = 1;
}

message EthBalanceResult {
    Result result = 1;
    int64  balance = 2;
}

message ClientInfo {
    string address = 1;
    string password = 2;
}

message Event {
    int64 time = 1;
    string jsonData = 2;
}

message TxParams {
    string from = 1;
    string password = 2;
    int64 value = 3;
    bool pending = 4;
    int64 gasPrice = 5;
    uint64 gasLimit = 6;
}

message PublishParams {
    TxParams txParam = 1;
    int64 price = 2;
    bytes metaDataID = 3;
    repeated string proofDataIDs = 4;
    int32 proofNum = 5;
    string detailsID = 6;
    bool supportVerify = 7;
}

message PublishResult{
    string publishId = 1;
    Result result = 2;
}

message PrepareParams {
    TxParams txParam  = 1;
    string publishId = 2;
    bool startVerify = 3;
}

message Result {
    bool success = 1;
    string errMsg = 2;
}

message BuyParams {
    TxParams txParam  = 1;
    int64 txId = 2;
}

message CancelTxParams {
    TxParams txParam  = 1;
    int64 txId = 2;
}

message ReEncryptDataParams {
    TxParams txParam  = 1;
    int64 txId = 2;
    bytes encodedDataWithSeller = 3;
}


message DataConfirmParams {
    TxParams txParam  = 1;
    int64 txId = 2;
    bool truth = 3;
}

message ApproveTransferParams {
    TxParams txParam  = 1;
    string spenderAddr = 2;
    int64 value = 3;
}

message VoteParams {
    TxParams txParam  = 1;
    int64 txId = 2;
    bool judge = 3;
    string comments = 4;
}

message RegisterVerifierParams {
    TxParams txParam  = 1;
}

message CreditVerifierParams {
    TxParams txParam  = 1;
    int64 txId = 2;
    uint32 index = 3;
    uint32 credit = 4;
}

message TransferTokenParams {
    TxParams txParam  = 1;
    string to = 2;
    int64 value = 3;
}

message TokenBalanceParams {
    TxParams txParam  = 1;
    string owner = 2;
}

message TokenBalanceResult {
    int64 balance = 1;
    Result result = 2;
}

message SubscribeInfo {
    string address = 1;
    repeated string event = 2;
}