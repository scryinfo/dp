// Code generated by protoc-gen-go. DO NOT EDIT.
// source: binary.proto

package go_out

import (
    context "context"
    fmt "fmt"
    proto "github.com/golang/protobuf/proto"
    grpc "google.golang.org/grpc"
    math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientInfo struct {
    Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
    Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{0}
}

func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (m *ClientInfo) XXX_Merge(src proto.Message) {
    xxx_messageInfo_ClientInfo.Merge(m, src)
}
func (m *ClientInfo) XXX_Size() int {
    return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
    xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetAddress() string {
    if m != nil {
        return m.Address
    }
    return ""
}

func (m *ClientInfo) GetPassword() string {
    if m != nil {
        return m.Password
    }
    return ""
}

type Event struct {
    BlockNumber          uint64   `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
    TxHash               string   `protobuf:"bytes,2,opt,name=txHash,proto3" json:"txHash,omitempty"`
    Address              string   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
    Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
    JsonData             string   `protobuf:"bytes,5,opt,name=jsonData,proto3" json:"jsonData,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{1}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
    xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
    return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
    xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetBlockNumber() uint64 {
    if m != nil {
        return m.BlockNumber
    }
    return 0
}

func (m *Event) GetTxHash() string {
    if m != nil {
        return m.TxHash
    }
    return ""
}

func (m *Event) GetAddress() string {
    if m != nil {
        return m.Address
    }
    return ""
}

func (m *Event) GetName() string {
    if m != nil {
        return m.Name
    }
    return ""
}

func (m *Event) GetJsonData() string {
    if m != nil {
        return m.JsonData
    }
    return ""
}

type TxParams struct {
    From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
    Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
    Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
    Pending              bool     `protobuf:"varint,4,opt,name=pending,proto3" json:"pending,omitempty"`
    GasPrice             uint64   `protobuf:"varint,5,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
    GasLimit             uint64   `protobuf:"varint,6,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *TxParams) Reset()         { *m = TxParams{} }
func (m *TxParams) String() string { return proto.CompactTextString(m) }
func (*TxParams) ProtoMessage()    {}
func (*TxParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{2}
}

func (m *TxParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_TxParams.Unmarshal(m, b)
}
func (m *TxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_TxParams.Marshal(b, m, deterministic)
}
func (m *TxParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_TxParams.Merge(m, src)
}
func (m *TxParams) XXX_Size() int {
    return xxx_messageInfo_TxParams.Size(m)
}
func (m *TxParams) XXX_DiscardUnknown() {
    xxx_messageInfo_TxParams.DiscardUnknown(m)
}

var xxx_messageInfo_TxParams proto.InternalMessageInfo

func (m *TxParams) GetFrom() string {
    if m != nil {
        return m.From
    }
    return ""
}

func (m *TxParams) GetPassword() string {
    if m != nil {
        return m.Password
    }
    return ""
}

func (m *TxParams) GetValue() uint64 {
    if m != nil {
        return m.Value
    }
    return 0
}

func (m *TxParams) GetPending() bool {
    if m != nil {
        return m.Pending
    }
    return false
}

func (m *TxParams) GetGasPrice() uint64 {
    if m != nil {
        return m.GasPrice
    }
    return 0
}

func (m *TxParams) GetGasLimit() uint64 {
    if m != nil {
        return m.GasLimit
    }
    return 0
}

type PublishParams struct {
    TxParam              *TxParams `protobuf:"bytes,1,opt,name=txParam,proto3" json:"txParam,omitempty"`
    Price                uint64    `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
    MetaDataID           []byte    `protobuf:"bytes,3,opt,name=metaDataID,proto3" json:"metaDataID,omitempty"`
    ProofDataIDs         []string  `protobuf:"bytes,4,rep,name=proofDataIDs,proto3" json:"proofDataIDs,omitempty"`
    ProofNum             int64     `protobuf:"varint,5,opt,name=proofNum,proto3" json:"proofNum,omitempty"`
    DetailsID            string    `protobuf:"bytes,6,opt,name=detailsID,proto3" json:"detailsID,omitempty"`
    SupportVerify        bool      `protobuf:"varint,7,opt,name=supportVerify,proto3" json:"supportVerify,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *PublishParams) Reset()         { *m = PublishParams{} }
func (m *PublishParams) String() string { return proto.CompactTextString(m) }
func (*PublishParams) ProtoMessage()    {}
func (*PublishParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{3}
}

func (m *PublishParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_PublishParams.Unmarshal(m, b)
}
func (m *PublishParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_PublishParams.Marshal(b, m, deterministic)
}
func (m *PublishParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_PublishParams.Merge(m, src)
}
func (m *PublishParams) XXX_Size() int {
    return xxx_messageInfo_PublishParams.Size(m)
}
func (m *PublishParams) XXX_DiscardUnknown() {
    xxx_messageInfo_PublishParams.DiscardUnknown(m)
}

var xxx_messageInfo_PublishParams proto.InternalMessageInfo

func (m *PublishParams) GetTxParam() *TxParams {
    if m != nil {
        return m.TxParam
    }
    return nil
}

func (m *PublishParams) GetPrice() uint64 {
    if m != nil {
        return m.Price
    }
    return 0
}

func (m *PublishParams) GetMetaDataID() []byte {
    if m != nil {
        return m.MetaDataID
    }
    return nil
}

func (m *PublishParams) GetProofDataIDs() []string {
    if m != nil {
        return m.ProofDataIDs
    }
    return nil
}

func (m *PublishParams) GetProofNum() int64 {
    if m != nil {
        return m.ProofNum
    }
    return 0
}

func (m *PublishParams) GetDetailsID() string {
    if m != nil {
        return m.DetailsID
    }
    return ""
}

func (m *PublishParams) GetSupportVerify() bool {
    if m != nil {
        return m.SupportVerify
    }
    return false
}

type PublishResult struct {
    PublishId            string   `protobuf:"bytes,1,opt,name=publishId,proto3" json:"publishId,omitempty"`
    Result               *Result  `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResult) Reset()         { *m = PublishResult{} }
func (m *PublishResult) String() string { return proto.CompactTextString(m) }
func (*PublishResult) ProtoMessage()    {}
func (*PublishResult) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{4}
}

func (m *PublishResult) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_PublishResult.Unmarshal(m, b)
}
func (m *PublishResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_PublishResult.Marshal(b, m, deterministic)
}
func (m *PublishResult) XXX_Merge(src proto.Message) {
    xxx_messageInfo_PublishResult.Merge(m, src)
}
func (m *PublishResult) XXX_Size() int {
    return xxx_messageInfo_PublishResult.Size(m)
}
func (m *PublishResult) XXX_DiscardUnknown() {
    xxx_messageInfo_PublishResult.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResult proto.InternalMessageInfo

func (m *PublishResult) GetPublishId() string {
    if m != nil {
        return m.PublishId
    }
    return ""
}

func (m *PublishResult) GetResult() *Result {
    if m != nil {
        return m.Result
    }
    return nil
}

type PrepareParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    PublishId            string    `protobuf:"bytes,2,opt,name=publishId,proto3" json:"publishId,omitempty"`
    StartVerify          bool      `protobuf:"varint,3,opt,name=startVerify,proto3" json:"startVerify,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *PrepareParams) Reset()         { *m = PrepareParams{} }
func (m *PrepareParams) String() string { return proto.CompactTextString(m) }
func (*PrepareParams) ProtoMessage()    {}
func (*PrepareParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{5}
}

func (m *PrepareParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_PrepareParams.Unmarshal(m, b)
}
func (m *PrepareParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_PrepareParams.Marshal(b, m, deterministic)
}
func (m *PrepareParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_PrepareParams.Merge(m, src)
}
func (m *PrepareParams) XXX_Size() int {
    return xxx_messageInfo_PrepareParams.Size(m)
}
func (m *PrepareParams) XXX_DiscardUnknown() {
    xxx_messageInfo_PrepareParams.DiscardUnknown(m)
}

var xxx_messageInfo_PrepareParams proto.InternalMessageInfo

func (m *PrepareParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *PrepareParams) GetPublishId() string {
    if m != nil {
        return m.PublishId
    }
    return ""
}

func (m *PrepareParams) GetStartVerify() bool {
    if m != nil {
        return m.StartVerify
    }
    return false
}

type Result struct {
    ErrorMsg             string   `protobuf:"bytes,1,opt,name=errorMsg,proto3" json:"errorMsg,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{6}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
    xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
    return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
    xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetErrorMsg() string {
    if m != nil {
        return m.ErrorMsg
    }
    return ""
}

type BuyParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    TxId                 uint64    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *BuyParams) Reset()         { *m = BuyParams{} }
func (m *BuyParams) String() string { return proto.CompactTextString(m) }
func (*BuyParams) ProtoMessage()    {}
func (*BuyParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{7}
}

func (m *BuyParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_BuyParams.Unmarshal(m, b)
}
func (m *BuyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_BuyParams.Marshal(b, m, deterministic)
}
func (m *BuyParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_BuyParams.Merge(m, src)
}
func (m *BuyParams) XXX_Size() int {
    return xxx_messageInfo_BuyParams.Size(m)
}
func (m *BuyParams) XXX_DiscardUnknown() {
    xxx_messageInfo_BuyParams.DiscardUnknown(m)
}

var xxx_messageInfo_BuyParams proto.InternalMessageInfo

func (m *BuyParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *BuyParams) GetTxId() uint64 {
    if m != nil {
        return m.TxId
    }
    return 0
}

type CancelTxParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    TxId                 uint64    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *CancelTxParams) Reset()         { *m = CancelTxParams{} }
func (m *CancelTxParams) String() string { return proto.CompactTextString(m) }
func (*CancelTxParams) ProtoMessage()    {}
func (*CancelTxParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{8}
}

func (m *CancelTxParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_CancelTxParams.Unmarshal(m, b)
}
func (m *CancelTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_CancelTxParams.Marshal(b, m, deterministic)
}
func (m *CancelTxParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_CancelTxParams.Merge(m, src)
}
func (m *CancelTxParams) XXX_Size() int {
    return xxx_messageInfo_CancelTxParams.Size(m)
}
func (m *CancelTxParams) XXX_DiscardUnknown() {
    xxx_messageInfo_CancelTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTxParams proto.InternalMessageInfo

func (m *CancelTxParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *CancelTxParams) GetTxId() uint64 {
    if m != nil {
        return m.TxId
    }
    return 0
}

type SubmitMetaDataIdParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    TxId                 uint64    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
    EncryptMetaDataId    [][]byte  `protobuf:"bytes,3,rep,name=encryptMetaDataId,proto3" json:"encryptMetaDataId,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *SubmitMetaDataIdParams) Reset()         { *m = SubmitMetaDataIdParams{} }
func (m *SubmitMetaDataIdParams) String() string { return proto.CompactTextString(m) }
func (*SubmitMetaDataIdParams) ProtoMessage()    {}
func (*SubmitMetaDataIdParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{9}
}

func (m *SubmitMetaDataIdParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_SubmitMetaDataIdParams.Unmarshal(m, b)
}
func (m *SubmitMetaDataIdParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_SubmitMetaDataIdParams.Marshal(b, m, deterministic)
}
func (m *SubmitMetaDataIdParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_SubmitMetaDataIdParams.Merge(m, src)
}
func (m *SubmitMetaDataIdParams) XXX_Size() int {
    return xxx_messageInfo_SubmitMetaDataIdParams.Size(m)
}
func (m *SubmitMetaDataIdParams) XXX_DiscardUnknown() {
    xxx_messageInfo_SubmitMetaDataIdParams.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitMetaDataIdParams proto.InternalMessageInfo

func (m *SubmitMetaDataIdParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *SubmitMetaDataIdParams) GetTxId() uint64 {
    if m != nil {
        return m.TxId
    }
    return 0
}

func (m *SubmitMetaDataIdParams) GetEncryptMetaDataId() [][]byte {
    if m != nil {
        return m.EncryptMetaDataId
    }
    return nil
}

type DataConfirmParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    TxId                 uint64    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
    Truth                bool      `protobuf:"varint,3,opt,name=truth,proto3" json:"truth,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *DataConfirmParams) Reset()         { *m = DataConfirmParams{} }
func (m *DataConfirmParams) String() string { return proto.CompactTextString(m) }
func (*DataConfirmParams) ProtoMessage()    {}
func (*DataConfirmParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{10}
}

func (m *DataConfirmParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_DataConfirmParams.Unmarshal(m, b)
}
func (m *DataConfirmParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_DataConfirmParams.Marshal(b, m, deterministic)
}
func (m *DataConfirmParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_DataConfirmParams.Merge(m, src)
}
func (m *DataConfirmParams) XXX_Size() int {
    return xxx_messageInfo_DataConfirmParams.Size(m)
}
func (m *DataConfirmParams) XXX_DiscardUnknown() {
    xxx_messageInfo_DataConfirmParams.DiscardUnknown(m)
}

var xxx_messageInfo_DataConfirmParams proto.InternalMessageInfo

func (m *DataConfirmParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *DataConfirmParams) GetTxId() uint64 {
    if m != nil {
        return m.TxId
    }
    return 0
}

func (m *DataConfirmParams) GetTruth() bool {
    if m != nil {
        return m.Truth
    }
    return false
}

type ApproveTransferParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    SpenderAddr          string    `protobuf:"bytes,2,opt,name=spenderAddr,proto3" json:"spenderAddr,omitempty"`
    Value                uint64    `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *ApproveTransferParams) Reset()         { *m = ApproveTransferParams{} }
func (m *ApproveTransferParams) String() string { return proto.CompactTextString(m) }
func (*ApproveTransferParams) ProtoMessage()    {}
func (*ApproveTransferParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{11}
}

func (m *ApproveTransferParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_ApproveTransferParams.Unmarshal(m, b)
}
func (m *ApproveTransferParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_ApproveTransferParams.Marshal(b, m, deterministic)
}
func (m *ApproveTransferParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_ApproveTransferParams.Merge(m, src)
}
func (m *ApproveTransferParams) XXX_Size() int {
    return xxx_messageInfo_ApproveTransferParams.Size(m)
}
func (m *ApproveTransferParams) XXX_DiscardUnknown() {
    xxx_messageInfo_ApproveTransferParams.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveTransferParams proto.InternalMessageInfo

func (m *ApproveTransferParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *ApproveTransferParams) GetSpenderAddr() string {
    if m != nil {
        return m.SpenderAddr
    }
    return ""
}

func (m *ApproveTransferParams) GetValue() uint64 {
    if m != nil {
        return m.Value
    }
    return 0
}

type VoteParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    TxId                 uint64    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
    Judge                bool      `protobuf:"varint,3,opt,name=judge,proto3" json:"judge,omitempty"`
    Comments             string    `protobuf:"bytes,4,opt,name=comments,proto3" json:"comments,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *VoteParams) Reset()         { *m = VoteParams{} }
func (m *VoteParams) String() string { return proto.CompactTextString(m) }
func (*VoteParams) ProtoMessage()    {}
func (*VoteParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{12}
}

func (m *VoteParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_VoteParams.Unmarshal(m, b)
}
func (m *VoteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_VoteParams.Marshal(b, m, deterministic)
}
func (m *VoteParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_VoteParams.Merge(m, src)
}
func (m *VoteParams) XXX_Size() int {
    return xxx_messageInfo_VoteParams.Size(m)
}
func (m *VoteParams) XXX_DiscardUnknown() {
    xxx_messageInfo_VoteParams.DiscardUnknown(m)
}

var xxx_messageInfo_VoteParams proto.InternalMessageInfo

func (m *VoteParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *VoteParams) GetTxId() uint64 {
    if m != nil {
        return m.TxId
    }
    return 0
}

func (m *VoteParams) GetJudge() bool {
    if m != nil {
        return m.Judge
    }
    return false
}

func (m *VoteParams) GetComments() string {
    if m != nil {
        return m.Comments
    }
    return ""
}

type RegisterVerifierParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *RegisterVerifierParams) Reset()         { *m = RegisterVerifierParams{} }
func (m *RegisterVerifierParams) String() string { return proto.CompactTextString(m) }
func (*RegisterVerifierParams) ProtoMessage()    {}
func (*RegisterVerifierParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{13}
}

func (m *RegisterVerifierParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_RegisterVerifierParams.Unmarshal(m, b)
}
func (m *RegisterVerifierParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_RegisterVerifierParams.Marshal(b, m, deterministic)
}
func (m *RegisterVerifierParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_RegisterVerifierParams.Merge(m, src)
}
func (m *RegisterVerifierParams) XXX_Size() int {
    return xxx_messageInfo_RegisterVerifierParams.Size(m)
}
func (m *RegisterVerifierParams) XXX_DiscardUnknown() {
    xxx_messageInfo_RegisterVerifierParams.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterVerifierParams proto.InternalMessageInfo

func (m *RegisterVerifierParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

type CreditVerifierParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    TxId                 uint64    `protobuf:"varint,2,opt,name=txId,proto3" json:"txId,omitempty"`
    Index                uint32    `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
    Credit               uint32    `protobuf:"varint,4,opt,name=credit,proto3" json:"credit,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *CreditVerifierParams) Reset()         { *m = CreditVerifierParams{} }
func (m *CreditVerifierParams) String() string { return proto.CompactTextString(m) }
func (*CreditVerifierParams) ProtoMessage()    {}
func (*CreditVerifierParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{14}
}

func (m *CreditVerifierParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_CreditVerifierParams.Unmarshal(m, b)
}
func (m *CreditVerifierParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_CreditVerifierParams.Marshal(b, m, deterministic)
}
func (m *CreditVerifierParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_CreditVerifierParams.Merge(m, src)
}
func (m *CreditVerifierParams) XXX_Size() int {
    return xxx_messageInfo_CreditVerifierParams.Size(m)
}
func (m *CreditVerifierParams) XXX_DiscardUnknown() {
    xxx_messageInfo_CreditVerifierParams.DiscardUnknown(m)
}

var xxx_messageInfo_CreditVerifierParams proto.InternalMessageInfo

func (m *CreditVerifierParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *CreditVerifierParams) GetTxId() uint64 {
    if m != nil {
        return m.TxId
    }
    return 0
}

func (m *CreditVerifierParams) GetIndex() uint32 {
    if m != nil {
        return m.Index
    }
    return 0
}

func (m *CreditVerifierParams) GetCredit() uint32 {
    if m != nil {
        return m.Credit
    }
    return 0
}

type TransferTokenParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    To                   string    `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
    Value                uint64    `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *TransferTokenParams) Reset()         { *m = TransferTokenParams{} }
func (m *TransferTokenParams) String() string { return proto.CompactTextString(m) }
func (*TransferTokenParams) ProtoMessage()    {}
func (*TransferTokenParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{15}
}

func (m *TransferTokenParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_TransferTokenParams.Unmarshal(m, b)
}
func (m *TransferTokenParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_TransferTokenParams.Marshal(b, m, deterministic)
}
func (m *TransferTokenParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_TransferTokenParams.Merge(m, src)
}
func (m *TransferTokenParams) XXX_Size() int {
    return xxx_messageInfo_TransferTokenParams.Size(m)
}
func (m *TransferTokenParams) XXX_DiscardUnknown() {
    xxx_messageInfo_TransferTokenParams.DiscardUnknown(m)
}

var xxx_messageInfo_TransferTokenParams proto.InternalMessageInfo

func (m *TransferTokenParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *TransferTokenParams) GetTo() string {
    if m != nil {
        return m.To
    }
    return ""
}

func (m *TransferTokenParams) GetValue() uint64 {
    if m != nil {
        return m.Value
    }
    return 0
}

type TokenBalanceParams struct {
    TxParams             *TxParams `protobuf:"bytes,1,opt,name=txParams,proto3" json:"txParams,omitempty"`
    Owner                string    `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
    XXX_NoUnkeyedLiteral struct{}  `json:"-"`
    XXX_unrecognized     []byte    `json:"-"`
    XXX_sizecache        int32     `json:"-"`
}

func (m *TokenBalanceParams) Reset()         { *m = TokenBalanceParams{} }
func (m *TokenBalanceParams) String() string { return proto.CompactTextString(m) }
func (*TokenBalanceParams) ProtoMessage()    {}
func (*TokenBalanceParams) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{16}
}

func (m *TokenBalanceParams) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_TokenBalanceParams.Unmarshal(m, b)
}
func (m *TokenBalanceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_TokenBalanceParams.Marshal(b, m, deterministic)
}
func (m *TokenBalanceParams) XXX_Merge(src proto.Message) {
    xxx_messageInfo_TokenBalanceParams.Merge(m, src)
}
func (m *TokenBalanceParams) XXX_Size() int {
    return xxx_messageInfo_TokenBalanceParams.Size(m)
}
func (m *TokenBalanceParams) XXX_DiscardUnknown() {
    xxx_messageInfo_TokenBalanceParams.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBalanceParams proto.InternalMessageInfo

func (m *TokenBalanceParams) GetTxParams() *TxParams {
    if m != nil {
        return m.TxParams
    }
    return nil
}

func (m *TokenBalanceParams) GetOwner() string {
    if m != nil {
        return m.Owner
    }
    return ""
}

type TokenBalanceResult struct {
    Balance              uint64   `protobuf:"varint,1,opt,name=balance,proto3" json:"balance,omitempty"`
    Result               *Result  `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
    XXX_NoUnkeyedLiteral struct{} `json:"-"`
    XXX_unrecognized     []byte   `json:"-"`
    XXX_sizecache        int32    `json:"-"`
}

func (m *TokenBalanceResult) Reset()         { *m = TokenBalanceResult{} }
func (m *TokenBalanceResult) String() string { return proto.CompactTextString(m) }
func (*TokenBalanceResult) ProtoMessage()    {}
func (*TokenBalanceResult) Descriptor() ([]byte, []int) {
    return fileDescriptor_3aeef8c45497084a, []int{17}
}

func (m *TokenBalanceResult) XXX_Unmarshal(b []byte) error {
    return xxx_messageInfo_TokenBalanceResult.Unmarshal(m, b)
}
func (m *TokenBalanceResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
    return xxx_messageInfo_TokenBalanceResult.Marshal(b, m, deterministic)
}
func (m *TokenBalanceResult) XXX_Merge(src proto.Message) {
    xxx_messageInfo_TokenBalanceResult.Merge(m, src)
}
func (m *TokenBalanceResult) XXX_Size() int {
    return xxx_messageInfo_TokenBalanceResult.Size(m)
}
func (m *TokenBalanceResult) XXX_DiscardUnknown() {
    xxx_messageInfo_TokenBalanceResult.DiscardUnknown(m)
}

var xxx_messageInfo_TokenBalanceResult proto.InternalMessageInfo

func (m *TokenBalanceResult) GetBalance() uint64 {
    if m != nil {
        return m.Balance
    }
    return 0
}

func (m *TokenBalanceResult) GetResult() *Result {
    if m != nil {
        return m.Result
    }
    return nil
}

func init() {
    proto.RegisterType((*ClientInfo)(nil), "api.ClientInfo")
    proto.RegisterType((*Event)(nil), "api.Event")
    proto.RegisterType((*TxParams)(nil), "api.TxParams")
    proto.RegisterType((*PublishParams)(nil), "api.PublishParams")
    proto.RegisterType((*PublishResult)(nil), "api.PublishResult")
    proto.RegisterType((*PrepareParams)(nil), "api.PrepareParams")
    proto.RegisterType((*Result)(nil), "api.Result")
    proto.RegisterType((*BuyParams)(nil), "api.BuyParams")
    proto.RegisterType((*CancelTxParams)(nil), "api.CancelTxParams")
    proto.RegisterType((*SubmitMetaDataIdParams)(nil), "api.SubmitMetaDataIdParams")
    proto.RegisterType((*DataConfirmParams)(nil), "api.DataConfirmParams")
    proto.RegisterType((*ApproveTransferParams)(nil), "api.ApproveTransferParams")
    proto.RegisterType((*VoteParams)(nil), "api.VoteParams")
    proto.RegisterType((*RegisterVerifierParams)(nil), "api.RegisterVerifierParams")
    proto.RegisterType((*CreditVerifierParams)(nil), "api.CreditVerifierParams")
    proto.RegisterType((*TransferTokenParams)(nil), "api.TransferTokenParams")
    proto.RegisterType((*TokenBalanceParams)(nil), "api.TokenBalanceParams")
    proto.RegisterType((*TokenBalanceResult)(nil), "api.TokenBalanceResult")
}

func init() { proto.RegisterFile("binary.proto", fileDescriptor_3aeef8c45497084a) }

var fileDescriptor_3aeef8c45497084a = []byte{
    // 1002 bytes of a gzipped FileDescriptorProto
    0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x6f, 0x23, 0x35,
    0x10, 0x6e, 0x9a, 0xa4, 0x69, 0xa7, 0x49, 0x4b, 0x7d, 0xa5, 0x2c, 0xe1, 0x84, 0x22, 0x73, 0x70,
    0x45, 0x82, 0x16, 0x7a, 0x0f, 0x08, 0x09, 0x24, 0x9a, 0xb4, 0x82, 0x9e, 0xb8, 0xa3, 0xda, 0x86,
    0x43, 0xe2, 0x05, 0x39, 0xbb, 0x4e, 0xe2, 0xbb, 0xec, 0x7a, 0x65, 0x7b, 0x73, 0xcd, 0x49, 0x3c,
    0x21, 0x9e, 0xf8, 0x17, 0xfc, 0x44, 0xde, 0x78, 0x43, 0x9e, 0xf5, 0x6e, 0x93, 0x4d, 0x0e, 0xd1,
    0xa3, 0x6f, 0xfb, 0xcd, 0xd8, 0x33, 0xf3, 0x8d, 0x3d, 0x9f, 0x17, 0x9a, 0x03, 0x11, 0x33, 0x35,
    0x3b, 0x4a, 0x94, 0x34, 0x92, 0x54, 0x59, 0x22, 0x68, 0x17, 0xa0, 0x37, 0x11, 0x3c, 0x36, 0x17,
    0xf1, 0x50, 0x12, 0x0f, 0x1a, 0x2c, 0x0c, 0x15, 0xd7, 0xda, 0xab, 0x74, 0x2a, 0x87, 0x5b, 0x7e,
    0x0e, 0x49, 0x1b, 0x36, 0x13, 0xa6, 0xf5, 0x4b, 0xa9, 0x42, 0x6f, 0x1d, 0x5d, 0x05, 0xa6, 0x7f,
    0x54, 0xa0, 0x7e, 0x3e, 0xe5, 0xb1, 0x21, 0x1d, 0xd8, 0x1e, 0x4c, 0x64, 0xf0, 0xe2, 0x69, 0x1a,
    0x0d, 0xb8, 0xc2, 0x18, 0x35, 0x7f, 0xde, 0x44, 0x0e, 0x60, 0xc3, 0x5c, 0x7f, 0xc7, 0xf4, 0xd8,
    0x45, 0x71, 0x68, 0x3e, 0x73, 0x75, 0x31, 0x33, 0x81, 0x5a, 0xcc, 0x22, 0xee, 0xd5, 0xd0, 0x8c,
    0xdf, 0xb6, 0x9a, 0xe7, 0x5a, 0xc6, 0x67, 0xcc, 0x30, 0xaf, 0x9e, 0x55, 0x93, 0x63, 0xfa, 0x67,
    0x05, 0x36, 0xfb, 0xd7, 0x97, 0x4c, 0xb1, 0x08, 0x37, 0x0f, 0x95, 0x8c, 0x1c, 0x1b, 0xfc, 0xfe,
    0x37, 0x2a, 0x64, 0x1f, 0xea, 0x53, 0x36, 0x49, 0x39, 0x16, 0x51, 0xf3, 0x33, 0x60, 0x8b, 0x4b,
    0x78, 0x1c, 0x8a, 0x78, 0x84, 0x55, 0x6c, 0xfa, 0x39, 0xb4, 0xb1, 0x46, 0x4c, 0x5f, 0x2a, 0x11,
    0x70, 0x2c, 0xa4, 0xe6, 0x17, 0xd8, 0xf9, 0xbe, 0x17, 0x91, 0x30, 0xde, 0x46, 0xe1, 0x43, 0x4c,
    0xff, 0xaa, 0x40, 0xeb, 0x32, 0x1d, 0x4c, 0x84, 0x1e, 0xbb, 0x4a, 0x1f, 0x42, 0xc3, 0x64, 0x55,
    0x63, 0xb1, 0xdb, 0x27, 0xad, 0x23, 0x96, 0x88, 0xa3, 0x9c, 0x89, 0x9f, 0x7b, 0x6d, 0x89, 0x09,
    0xe6, 0x5b, 0xcf, 0x4a, 0x44, 0x40, 0xde, 0x07, 0x88, 0xb8, 0x61, 0xb6, 0x03, 0x17, 0x67, 0x58,
    0x7d, 0xd3, 0x9f, 0xb3, 0x10, 0x0a, 0xcd, 0x44, 0x49, 0x39, 0xcc, 0xa0, 0xf6, 0x6a, 0x9d, 0xea,
    0xe1, 0x96, 0xbf, 0x60, 0xc3, 0xc6, 0x58, 0xfc, 0x34, 0x8d, 0x90, 0x4c, 0xd5, 0x2f, 0x30, 0xb9,
    0x0f, 0x5b, 0x21, 0x37, 0x4c, 0x4c, 0xf4, 0xc5, 0x19, 0xb2, 0xd9, 0xf2, 0x6f, 0x0c, 0xe4, 0x01,
    0xb4, 0x74, 0x9a, 0x24, 0x52, 0x99, 0x67, 0x5c, 0x89, 0xe1, 0xcc, 0x6b, 0x60, 0x9b, 0x16, 0x8d,
    0xd4, 0x2f, 0x38, 0xfb, 0x5c, 0xa7, 0x13, 0x63, 0x83, 0x26, 0x99, 0xe1, 0x22, 0x74, 0x47, 0x74,
    0x63, 0x20, 0x1f, 0xc0, 0x86, 0xc2, 0x75, 0xc8, 0x74, 0xfb, 0x64, 0x1b, 0x1b, 0x92, 0x6d, 0xf5,
    0x9d, 0x8b, 0xbe, 0x82, 0xd6, 0xa5, 0xe2, 0x09, 0x53, 0xdc, 0xf5, 0xf1, 0x63, 0xd8, 0x74, 0x9d,
    0xd2, 0xab, 0x1b, 0x59, 0xb8, 0x17, 0xd3, 0xaf, 0x97, 0xd3, 0x77, 0x60, 0x5b, 0x1b, 0x56, 0x30,
    0xaa, 0x22, 0xa3, 0x79, 0x13, 0x7d, 0x00, 0x1b, 0x8e, 0x48, 0x1b, 0x36, 0xb9, 0x52, 0x52, 0x3d,
    0xd1, 0x23, 0xc7, 0xa3, 0xc0, 0xf4, 0x31, 0x6c, 0x75, 0xd3, 0xd9, 0xed, 0xab, 0x23, 0x50, 0x33,
    0xd7, 0xae, 0xb0, 0x9a, 0x8f, 0xdf, 0xf4, 0x07, 0xd8, 0xe9, 0xb1, 0x38, 0xe0, 0x93, 0xe2, 0x82,
    0xff, 0xcf, 0x80, 0xbf, 0x57, 0xe0, 0xe0, 0x2a, 0x1d, 0x44, 0xc2, 0x3c, 0xc9, 0xef, 0x4a, 0x78,
    0x27, 0x91, 0xc9, 0x27, 0xb0, 0xc7, 0xe3, 0x40, 0xcd, 0x92, 0xb9, 0xc8, 0x5e, 0xb5, 0x53, 0x3d,
    0x6c, 0xfa, 0xcb, 0x0e, 0x3a, 0x86, 0x3d, 0xfb, 0xd5, 0x93, 0xf1, 0x50, 0xa8, 0xe8, 0x6e, 0x2a,
    0xd8, 0x87, 0xba, 0x51, 0xa9, 0x19, 0xbb, 0xa3, 0xcb, 0x00, 0x7d, 0x05, 0x6f, 0x9f, 0x26, 0x89,
    0x92, 0x53, 0xde, 0x57, 0x2c, 0xd6, 0x43, 0xae, 0x6e, 0x9f, 0xcd, 0x5e, 0x0d, 0xab, 0x00, 0x5c,
    0x9d, 0x86, 0xa1, 0x72, 0x57, 0x67, 0xde, 0xb4, 0x5a, 0x47, 0xe8, 0xaf, 0x00, 0xcf, 0xa4, 0xe1,
    0x77, 0x46, 0xef, 0x79, 0x1a, 0x8e, 0x78, 0x4e, 0x0f, 0x81, 0xbd, 0x89, 0x81, 0x8c, 0x22, 0x1e,
    0x1b, 0xed, 0x14, 0xb3, 0xc0, 0xb4, 0x07, 0x07, 0x3e, 0x1f, 0x09, 0x6d, 0xb8, 0xc2, 0x1b, 0x2c,
    0xde, 0x80, 0x3b, 0xfd, 0xad, 0x02, 0xfb, 0x3d, 0xc5, 0x43, 0x61, 0xde, 0x38, 0xc6, 0xeb, 0xe8,
    0x88, 0x38, 0xe4, 0xd7, 0x48, 0xa7, 0xe5, 0x67, 0xc0, 0x3e, 0x17, 0x01, 0x26, 0x43, 0x32, 0x2d,
    0xdf, 0x21, 0x3a, 0x84, 0x7b, 0xf9, 0xf1, 0xf5, 0xe5, 0x0b, 0x1e, 0xdf, 0xbe, 0x86, 0x1d, 0x58,
    0x37, 0xd2, 0x1d, 0xdd, 0xba, 0x91, 0xaf, 0x39, 0xb1, 0x1f, 0x81, 0x60, 0xfc, 0x2e, 0x9b, 0xd8,
    0xb9, 0xbb, 0x7d, 0x9a, 0x7d, 0xa8, 0xcb, 0x97, 0x31, 0xcf, 0x2f, 0x49, 0x06, 0xe8, 0xd5, 0x62,
    0x58, 0xa7, 0x22, 0x1e, 0x34, 0x06, 0x99, 0xc1, 0xbd, 0x9c, 0x39, 0xfc, 0x4f, 0x52, 0x78, 0xf2,
    0x77, 0x1d, 0x5a, 0x5d, 0x7c, 0xe0, 0xaf, 0xb8, 0x9a, 0xda, 0x47, 0xe1, 0x53, 0x00, 0x9f, 0x07,
    0x53, 0x7c, 0x9b, 0x35, 0xd9, 0xc5, 0x4d, 0x37, 0xaf, 0x7d, 0x1b, 0xd0, 0x80, 0x5e, 0xba, 0xf6,
    0x59, 0x85, 0x3c, 0x82, 0x86, 0xd3, 0x67, 0x42, 0xd0, 0xb5, 0xf0, 0x42, 0xb5, 0x17, 0x6c, 0x59,
    0x6e, 0xba, 0x46, 0x3e, 0x87, 0xa6, 0x13, 0xe0, 0xbe, 0xec, 0xa6, 0xb3, 0x7c, 0xe7, 0xbc, 0x26,
    0xb7, 0xe7, 0xcb, 0xa5, 0x6b, 0xe4, 0x10, 0x1a, 0xdd, 0x74, 0x66, 0xe7, 0x9d, 0xec, 0xa0, 0xa7,
    0xd0, 0xc7, 0xf2, 0xca, 0x2f, 0x60, 0xcf, 0xe9, 0x9d, 0x3d, 0x6c, 0x16, 0x18, 0x21, 0x63, 0x72,
    0x2f, 0xe3, 0xb1, 0xa0, 0x83, 0xe5, 0x8d, 0x8f, 0xe1, 0x7e, 0x59, 0xd6, 0xce, 0xe3, 0xe0, 0x27,
    0x61, 0xc6, 0xdd, 0x74, 0xc6, 0x15, 0x79, 0x0f, 0x97, 0xaf, 0x56, 0xbe, 0x72, 0xac, 0x2f, 0xe1,
    0x2d, 0xa7, 0x4b, 0x76, 0x55, 0xdf, 0xaa, 0x08, 0x39, 0xc0, 0x25, 0x4b, 0x92, 0x55, 0xde, 0xfa,
    0x15, 0xec, 0x96, 0xc4, 0x86, 0xb4, 0x71, 0xc5, 0x4a, 0x09, 0x2a, 0xef, 0xfe, 0x08, 0x6a, 0x56,
    0x2e, 0xdc, 0xc1, 0xdd, 0x28, 0x47, 0x79, 0xdd, 0x37, 0x40, 0xf2, 0xb9, 0x3e, 0xd5, 0xf9, 0x54,
    0x3a, 0x8a, 0xab, 0x07, 0xbe, 0x1c, 0xe1, 0x6b, 0xd8, 0xcb, 0x66, 0x5a, 0xf7, 0x65, 0x11, 0xe0,
    0xdd, 0xac, 0xcf, 0x2b, 0x66, 0x7d, 0xb9, 0x43, 0x3b, 0x0b, 0xd3, 0xa8, 0x89, 0x97, 0xcd, 0xc3,
    0xf2, 0x88, 0x96, 0xb7, 0x9e, 0xc3, 0xee, 0xb7, 0xdc, 0xcc, 0x0f, 0x03, 0x79, 0x27, 0xdb, 0xbb,
    0x34, 0x76, 0xed, 0x65, 0x47, 0x1e, 0xa6, 0xfb, 0xf0, 0xe7, 0x0f, 0x47, 0xc2, 0x8c, 0xd3, 0xc1,
    0x51, 0x20, 0xa3, 0x63, 0x1d, 0xa8, 0x99, 0x88, 0x87, 0xf2, 0x38, 0x4c, 0x8e, 0x59, 0x22, 0x8e,
    0x47, 0xf2, 0x17, 0x99, 0x1a, 0xfb, 0x39, 0xd8, 0xc0, 0x7f, 0xdf, 0x47, 0xff, 0x04, 0x00, 0x00,
    0xff, 0xff, 0xe4, 0xc9, 0xed, 0xdd, 0x0b, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BinaryServiceClient is the client API for BinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BinaryServiceClient interface {
    //receive events by creating a server stream channel
    RecvEvents(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (BinaryService_RecvEventsClient, error)
    //publish
    Publish(ctx context.Context, in *PublishParams, opts ...grpc.CallOption) (*PublishResult, error)
    //prepare to buy
    PrepareToBuy(ctx context.Context, in *PrepareParams, opts ...grpc.CallOption) (*Result, error)
    //buy
    BuyData(ctx context.Context, in *BuyParams, opts ...grpc.CallOption) (*Result, error)
    //cancel transaction
    CancelTransaction(ctx context.Context, in *CancelTxParams, opts ...grpc.CallOption) (*Result, error)
    //submit encoded meta data id
    SubmitMetaDataIdEncWithBuyer(ctx context.Context, in *SubmitMetaDataIdParams, opts ...grpc.CallOption) (*Result, error)
    //confirm data truth
    ConfirmDataTruth(ctx context.Context, in *DataConfirmParams, opts ...grpc.CallOption) (*Result, error)
    //approve transfer
    ApproveTransfer(ctx context.Context, in *ApproveTransferParams, opts ...grpc.CallOption) (*Result, error)
    //vote
    Vote(ctx context.Context, in *VoteParams, opts ...grpc.CallOption) (*Result, error)
    //register as verifier
    RegisterAsVerifier(ctx context.Context, in *RegisterVerifierParams, opts ...grpc.CallOption) (*Result, error)
    //credits to verifier
    CreditsToVerifier(ctx context.Context, in *CreditVerifierParams, opts ...grpc.CallOption) (*Result, error)
    //transfer tokens
    TransferTokens(ctx context.Context, in *TransferTokenParams, opts ...grpc.CallOption) (*Result, error)
    //get token balance
    GetTokenBalance(ctx context.Context, in *TokenBalanceParams, opts ...grpc.CallOption) (*TokenBalanceResult, error)
}

type binaryServiceClient struct {
    cc *grpc.ClientConn
}

func NewBinaryServiceClient(cc *grpc.ClientConn) BinaryServiceClient {
    return &binaryServiceClient{cc}
}

func (c *binaryServiceClient) RecvEvents(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (BinaryService_RecvEventsClient, error) {
    stream, err := c.cc.NewStream(ctx, &_BinaryService_serviceDesc.Streams[0], "/api.BinaryService/RecvEvents", opts...)
    if err != nil {
        return nil, err
    }
    x := &binaryServiceRecvEventsClient{stream}
    if err := x.ClientStream.SendMsg(in); err != nil {
        return nil, err
    }
    if err := x.ClientStream.CloseSend(); err != nil {
        return nil, err
    }
    return x, nil
}

type BinaryService_RecvEventsClient interface {
    Recv() (*Event, error)
    grpc.ClientStream
}

type binaryServiceRecvEventsClient struct {
    grpc.ClientStream
}

func (x *binaryServiceRecvEventsClient) Recv() (*Event, error) {
    m := new(Event)
    if err := x.ClientStream.RecvMsg(m); err != nil {
        return nil, err
    }
    return m, nil
}

func (c *binaryServiceClient) Publish(ctx context.Context, in *PublishParams, opts ...grpc.CallOption) (*PublishResult, error) {
    out := new(PublishResult)
    err := c.cc.Invoke(ctx, "/api.BinaryService/Publish", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) PrepareToBuy(ctx context.Context, in *PrepareParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/PrepareToBuy", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) BuyData(ctx context.Context, in *BuyParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/BuyData", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) CancelTransaction(ctx context.Context, in *CancelTxParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/CancelTransaction", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) SubmitMetaDataIdEncWithBuyer(ctx context.Context, in *SubmitMetaDataIdParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/SubmitMetaDataIdEncWithBuyer", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) ConfirmDataTruth(ctx context.Context, in *DataConfirmParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/ConfirmDataTruth", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) ApproveTransfer(ctx context.Context, in *ApproveTransferParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/ApproveTransfer", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) Vote(ctx context.Context, in *VoteParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/Vote", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) RegisterAsVerifier(ctx context.Context, in *RegisterVerifierParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/RegisterAsVerifier", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) CreditsToVerifier(ctx context.Context, in *CreditVerifierParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/CreditsToVerifier", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) TransferTokens(ctx context.Context, in *TransferTokenParams, opts ...grpc.CallOption) (*Result, error) {
    out := new(Result)
    err := c.cc.Invoke(ctx, "/api.BinaryService/TransferTokens", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

func (c *binaryServiceClient) GetTokenBalance(ctx context.Context, in *TokenBalanceParams, opts ...grpc.CallOption) (*TokenBalanceResult, error) {
    out := new(TokenBalanceResult)
    err := c.cc.Invoke(ctx, "/api.BinaryService/GetTokenBalance", in, out, opts...)
    if err != nil {
        return nil, err
    }
    return out, nil
}

// BinaryServiceServer is the server API for BinaryService service.
type BinaryServiceServer interface {
    //receive events by creating a server stream channel
    RecvEvents(*ClientInfo, BinaryService_RecvEventsServer) error
    //publish
    Publish(context.Context, *PublishParams) (*PublishResult, error)
    //prepare to buy
    PrepareToBuy(context.Context, *PrepareParams) (*Result, error)
    //buy
    BuyData(context.Context, *BuyParams) (*Result, error)
    //cancel transaction
    CancelTransaction(context.Context, *CancelTxParams) (*Result, error)
    //submit encoded meta data id
    SubmitMetaDataIdEncWithBuyer(context.Context, *SubmitMetaDataIdParams) (*Result, error)
    //confirm data truth
    ConfirmDataTruth(context.Context, *DataConfirmParams) (*Result, error)
    //approve transfer
    ApproveTransfer(context.Context, *ApproveTransferParams) (*Result, error)
    //vote
    Vote(context.Context, *VoteParams) (*Result, error)
    //register as verifier
    RegisterAsVerifier(context.Context, *RegisterVerifierParams) (*Result, error)
    //credits to verifier
    CreditsToVerifier(context.Context, *CreditVerifierParams) (*Result, error)
    //transfer tokens
    TransferTokens(context.Context, *TransferTokenParams) (*Result, error)
    //get token balance
    GetTokenBalance(context.Context, *TokenBalanceParams) (*TokenBalanceResult, error)
}

func RegisterBinaryServiceServer(s *grpc.Server, srv BinaryServiceServer) {
    s.RegisterService(&_BinaryService_serviceDesc, srv)
}

func _BinaryService_RecvEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
    m := new(ClientInfo)
    if err := stream.RecvMsg(m); err != nil {
        return err
    }
    return srv.(BinaryServiceServer).RecvEvents(m, &binaryServiceRecvEventsServer{stream})
}

type BinaryService_RecvEventsServer interface {
    Send(*Event) error
    grpc.ServerStream
}

type binaryServiceRecvEventsServer struct {
    grpc.ServerStream
}

func (x *binaryServiceRecvEventsServer) Send(m *Event) error {
    return x.ServerStream.SendMsg(m)
}

func _BinaryService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(PublishParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).Publish(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/Publish",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).Publish(ctx, req.(*PublishParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_PrepareToBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(PrepareParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).PrepareToBuy(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/PrepareToBuy",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).PrepareToBuy(ctx, req.(*PrepareParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_BuyData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(BuyParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).BuyData(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/BuyData",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).BuyData(ctx, req.(*BuyParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_CancelTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(CancelTxParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).CancelTransaction(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/CancelTransaction",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).CancelTransaction(ctx, req.(*CancelTxParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_SubmitMetaDataIdEncWithBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(SubmitMetaDataIdParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).SubmitMetaDataIdEncWithBuyer(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/SubmitMetaDataIdEncWithBuyer",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).SubmitMetaDataIdEncWithBuyer(ctx, req.(*SubmitMetaDataIdParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_ConfirmDataTruth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(DataConfirmParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).ConfirmDataTruth(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/ConfirmDataTruth",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).ConfirmDataTruth(ctx, req.(*DataConfirmParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_ApproveTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(ApproveTransferParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).ApproveTransfer(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/ApproveTransfer",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).ApproveTransfer(ctx, req.(*ApproveTransferParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(VoteParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).Vote(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/Vote",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).Vote(ctx, req.(*VoteParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_RegisterAsVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(RegisterVerifierParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).RegisterAsVerifier(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/RegisterAsVerifier",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).RegisterAsVerifier(ctx, req.(*RegisterVerifierParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_CreditsToVerifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(CreditVerifierParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).CreditsToVerifier(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/CreditsToVerifier",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).CreditsToVerifier(ctx, req.(*CreditVerifierParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_TransferTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(TransferTokenParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).TransferTokens(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/TransferTokens",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).TransferTokens(ctx, req.(*TransferTokenParams))
    }
    return interceptor(ctx, in, info, handler)
}

func _BinaryService_GetTokenBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(TokenBalanceParams)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil {
        return srv.(BinaryServiceServer).GetTokenBalance(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
        FullMethod: "/api.BinaryService/GetTokenBalance",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(BinaryServiceServer).GetTokenBalance(ctx, req.(*TokenBalanceParams))
    }
    return interceptor(ctx, in, info, handler)
}

var _BinaryService_serviceDesc = grpc.ServiceDesc{
    ServiceName: "api.BinaryService",
    HandlerType: (*BinaryServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: "Publish",
            Handler:    _BinaryService_Publish_Handler,
        },
        {
            MethodName: "PrepareToBuy",
            Handler:    _BinaryService_PrepareToBuy_Handler,
        },
        {
            MethodName: "BuyData",
            Handler:    _BinaryService_BuyData_Handler,
        },
        {
            MethodName: "CancelTransaction",
            Handler:    _BinaryService_CancelTransaction_Handler,
        },
        {
            MethodName: "SubmitMetaDataIdEncWithBuyer",
            Handler:    _BinaryService_SubmitMetaDataIdEncWithBuyer_Handler,
        },
        {
            MethodName: "ConfirmDataTruth",
            Handler:    _BinaryService_ConfirmDataTruth_Handler,
        },
        {
            MethodName: "ApproveTransfer",
            Handler:    _BinaryService_ApproveTransfer_Handler,
        },
        {
            MethodName: "Vote",
            Handler:    _BinaryService_Vote_Handler,
        },
        {
            MethodName: "RegisterAsVerifier",
            Handler:    _BinaryService_RegisterAsVerifier_Handler,
        },
        {
            MethodName: "CreditsToVerifier",
            Handler:    _BinaryService_CreditsToVerifier_Handler,
        },
        {
            MethodName: "TransferTokens",
            Handler:    _BinaryService_TransferTokens_Handler,
        },
        {
            MethodName: "GetTokenBalance",
            Handler:    _BinaryService_GetTokenBalance_Handler,
        },
    },
    Streams: []grpc.StreamDesc{
        {
            StreamName:    "RecvEvents",
            Handler:       _BinaryService_RecvEvents_Handler,
            ServerStreams: true,
        },
    },
    Metadata: "binary.proto",
}
