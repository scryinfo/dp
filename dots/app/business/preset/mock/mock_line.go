// Code generated by MockGen. DO NOT EDIT.
// Source: ../line.go

// Package mock_dot is a generated GoMock package.
package mock_dot

import (
	gomock "github.com/golang/mock/gomock"
	dot "github.com/scryinfo/dot/dot"
	reflect "reflect"
)

// MockInjecter is a mock of Injecter interface
type MockInjecter struct {
	ctrl     *gomock.Controller
	recorder *MockInjecterMockRecorder
}

// MockInjecterMockRecorder is the mock recorder for MockInjecter
type MockInjecterMockRecorder struct {
	mock *MockInjecter
}

// NewMockInjecter creates a new mock instance
func NewMockInjecter(ctrl *gomock.Controller) *MockInjecter {
	mock := &MockInjecter{ctrl: ctrl}
	mock.recorder = &MockInjecterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInjecter) EXPECT() *MockInjecterMockRecorder {
	return m.recorder
}

// Inject mocks base method
func (m *MockInjecter) Inject(obj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inject indicates an expected call of Inject
func (mr *MockInjecterMockRecorder) Inject(obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockInjecter)(nil).Inject), obj)
}

// GetByType mocks base method
func (m *MockInjecter) GetByType(t reflect.Type) (dot.Dot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByType", t)
	ret0, _ := ret[0].(dot.Dot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByType indicates an expected call of GetByType
func (mr *MockInjecterMockRecorder) GetByType(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByType", reflect.TypeOf((*MockInjecter)(nil).GetByType), t)
}

// GetByLiveId mocks base method
func (m *MockInjecter) GetByLiveId(id dot.LiveId) (dot.Dot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLiveId", id)
	ret0, _ := ret[0].(dot.Dot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLiveId indicates an expected call of GetByLiveId
func (mr *MockInjecterMockRecorder) GetByLiveId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLiveId", reflect.TypeOf((*MockInjecter)(nil).GetByLiveId), id)
}

// ReplaceOrAddByType mocks base method
func (m *MockInjecter) ReplaceOrAddByType(d dot.Dot) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOrAddByType", d)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOrAddByType indicates an expected call of ReplaceOrAddByType
func (mr *MockInjecterMockRecorder) ReplaceOrAddByType(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOrAddByType", reflect.TypeOf((*MockInjecter)(nil).ReplaceOrAddByType), d)
}

// ReplaceOrAddByParamType mocks base method
func (m *MockInjecter) ReplaceOrAddByParamType(d dot.Dot, t reflect.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOrAddByParamType", d, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOrAddByParamType indicates an expected call of ReplaceOrAddByParamType
func (mr *MockInjecterMockRecorder) ReplaceOrAddByParamType(d, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOrAddByParamType", reflect.TypeOf((*MockInjecter)(nil).ReplaceOrAddByParamType), d, t)
}

// ReplaceOrAddByLiveId mocks base method
func (m *MockInjecter) ReplaceOrAddByLiveId(d dot.Dot, id dot.LiveId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceOrAddByLiveId", d, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceOrAddByLiveId indicates an expected call of ReplaceOrAddByLiveId
func (mr *MockInjecterMockRecorder) ReplaceOrAddByLiveId(d, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceOrAddByLiveId", reflect.TypeOf((*MockInjecter)(nil).ReplaceOrAddByLiveId), d, id)
}

// RemoveByType mocks base method
func (m *MockInjecter) RemoveByType(t reflect.Type) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByType", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByType indicates an expected call of RemoveByType
func (mr *MockInjecterMockRecorder) RemoveByType(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByType", reflect.TypeOf((*MockInjecter)(nil).RemoveByType), t)
}

// RemoveByLiveId mocks base method
func (m *MockInjecter) RemoveByLiveId(id dot.LiveId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveByLiveId", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveByLiveId indicates an expected call of RemoveByLiveId
func (mr *MockInjecterMockRecorder) RemoveByLiveId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveByLiveId", reflect.TypeOf((*MockInjecter)(nil).RemoveByLiveId), id)
}

// SetParent mocks base method
func (m *MockInjecter) SetParent(p dot.Injecter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParent", p)
}

// SetParent indicates an expected call of SetParent
func (mr *MockInjecterMockRecorder) SetParent(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParent", reflect.TypeOf((*MockInjecter)(nil).SetParent), p)
}

// GetParent mocks base method
func (m *MockInjecter) GetParent() dot.Injecter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent")
	ret0, _ := ret[0].(dot.Injecter)
	return ret0
}

// GetParent indicates an expected call of GetParent
func (mr *MockInjecterMockRecorder) GetParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockInjecter)(nil).GetParent))
}

// MockLine is a mock of Line interface
type MockLine struct {
	ctrl     *gomock.Controller
	recorder *MockLineMockRecorder
}

// MockLineMockRecorder is the mock recorder for MockLine
type MockLineMockRecorder struct {
	mock *MockLine
}

// NewMockLine creates a new mock instance
func NewMockLine(ctrl *gomock.Controller) *MockLine {
	mock := &MockLine{ctrl: ctrl}
	mock.recorder = &MockLineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLine) EXPECT() *MockLineMockRecorder {
	return m.recorder
}

// Id mocks base method
func (m *MockLine) Id() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(string)
	return ret0
}

// Id indicates an expected call of Id
func (mr *MockLineMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockLine)(nil).Id))
}

// Config mocks base method
func (m *MockLine) Config() *dot.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*dot.Config)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockLineMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockLine)(nil).Config))
}

// SConfig mocks base method
func (m *MockLine) SConfig() dot.SConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SConfig")
	ret0, _ := ret[0].(dot.SConfig)
	return ret0
}

// SConfig indicates an expected call of SConfig
func (mr *MockLineMockRecorder) SConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SConfig", reflect.TypeOf((*MockLine)(nil).SConfig))
}

// SLogger mocks base method
func (m *MockLine) SLogger() dot.SLogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SLogger")
	ret0, _ := ret[0].(dot.SLogger)
	return ret0
}

// SLogger indicates an expected call of SLogger
func (mr *MockLineMockRecorder) SLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SLogger", reflect.TypeOf((*MockLine)(nil).SLogger))
}

// AddNewerByLiveId mocks base method
func (m *MockLine) AddNewerByLiveId(liveid dot.LiveId, newDot dot.Newer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewerByLiveId", liveid, newDot)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewerByLiveId indicates an expected call of AddNewerByLiveId
func (mr *MockLineMockRecorder) AddNewerByLiveId(liveid, newDot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewerByLiveId", reflect.TypeOf((*MockLine)(nil).AddNewerByLiveId), liveid, newDot)
}

// AddNewerByTypeId mocks base method
func (m *MockLine) AddNewerByTypeId(typeid dot.TypeId, newDot dot.Newer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewerByTypeId", typeid, newDot)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewerByTypeId indicates an expected call of AddNewerByTypeId
func (mr *MockLineMockRecorder) AddNewerByTypeId(typeid, newDot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewerByTypeId", reflect.TypeOf((*MockLine)(nil).AddNewerByTypeId), typeid, newDot)
}

// RemoveNewerByLiveId mocks base method
func (m *MockLine) RemoveNewerByLiveId(liveid dot.LiveId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNewerByLiveId", liveid)
}

// RemoveNewerByLiveId indicates an expected call of RemoveNewerByLiveId
func (mr *MockLineMockRecorder) RemoveNewerByLiveId(liveid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNewerByLiveId", reflect.TypeOf((*MockLine)(nil).RemoveNewerByLiveId), liveid)
}

// RemoveNewerByTypeId mocks base method
func (m *MockLine) RemoveNewerByTypeId(typeid dot.TypeId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveNewerByTypeId", typeid)
}

// RemoveNewerByTypeId indicates an expected call of RemoveNewerByTypeId
func (mr *MockLineMockRecorder) RemoveNewerByTypeId(typeid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNewerByTypeId", reflect.TypeOf((*MockLine)(nil).RemoveNewerByTypeId), typeid)
}

// PreAdd mocks base method
func (m *MockLine) PreAdd(typeLives ...*dot.TypeLives) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range typeLives {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PreAdd", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PreAdd indicates an expected call of PreAdd
func (mr *MockLineMockRecorder) PreAdd(typeLives ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreAdd", reflect.TypeOf((*MockLine)(nil).PreAdd), typeLives...)
}

// ToLifer mocks base method
func (m *MockLine) ToLifer() dot.Lifer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToLifer")
	ret0, _ := ret[0].(dot.Lifer)
	return ret0
}

// ToLifer indicates an expected call of ToLifer
func (mr *MockLineMockRecorder) ToLifer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToLifer", reflect.TypeOf((*MockLine)(nil).ToLifer))
}

// ToInjecter mocks base method
func (m *MockLine) ToInjecter() dot.Injecter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToInjecter")
	ret0, _ := ret[0].(dot.Injecter)
	return ret0
}

// ToInjecter indicates an expected call of ToInjecter
func (mr *MockLineMockRecorder) ToInjecter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToInjecter", reflect.TypeOf((*MockLine)(nil).ToInjecter))
}

// ToDotEventer mocks base method
func (m *MockLine) ToDotEventer() dot.Eventer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToDotEventer")
	ret0, _ := ret[0].(dot.Eventer)
	return ret0
}

// ToDotEventer indicates an expected call of ToDotEventer
func (mr *MockLineMockRecorder) ToDotEventer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToDotEventer", reflect.TypeOf((*MockLine)(nil).ToDotEventer))
}

// GetDotConfig mocks base method
func (m *MockLine) GetDotConfig(liveid dot.LiveId) *dot.LiveConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDotConfig", liveid)
	ret0, _ := ret[0].(*dot.LiveConfig)
	return ret0
}

// GetDotConfig indicates an expected call of GetDotConfig
func (mr *MockLineMockRecorder) GetDotConfig(liveid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDotConfig", reflect.TypeOf((*MockLine)(nil).GetDotConfig), liveid)
}

// GetLineBuilder mocks base method
func (m *MockLine) GetLineBuilder() *dot.Builder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineBuilder")
	ret0, _ := ret[0].(*dot.Builder)
	return ret0
}

// GetLineBuilder indicates an expected call of GetLineBuilder
func (mr *MockLineMockRecorder) GetLineBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineBuilder", reflect.TypeOf((*MockLine)(nil).GetLineBuilder))
}

// InfoAllTypeAdnLives mocks base method
func (m *MockLine) InfoAllTypeAdnLives() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfoAllTypeAdnLives")
}

// InfoAllTypeAdnLives indicates an expected call of InfoAllTypeAdnLives
func (mr *MockLineMockRecorder) InfoAllTypeAdnLives() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoAllTypeAdnLives", reflect.TypeOf((*MockLine)(nil).InfoAllTypeAdnLives))
}

// MockSetterLine is a mock of SetterLine interface
type MockSetterLine struct {
	ctrl     *gomock.Controller
	recorder *MockSetterLineMockRecorder
}

// MockSetterLineMockRecorder is the mock recorder for MockSetterLine
type MockSetterLineMockRecorder struct {
	mock *MockSetterLine
}

// NewMockSetterLine creates a new mock instance
func NewMockSetterLine(ctrl *gomock.Controller) *MockSetterLine {
	mock := &MockSetterLine{ctrl: ctrl}
	mock.recorder = &MockSetterLineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetterLine) EXPECT() *MockSetterLineMockRecorder {
	return m.recorder
}

// SetLine mocks base method
func (m *MockSetterLine) SetLine(l dot.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLine", l)
}

// SetLine indicates an expected call of SetLine
func (mr *MockSetterLineMockRecorder) SetLine(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLine", reflect.TypeOf((*MockSetterLine)(nil).SetLine), l)
}

// MockSetterTypeAndLiveId is a mock of SetterTypeAndLiveId interface
type MockSetterTypeAndLiveId struct {
	ctrl     *gomock.Controller
	recorder *MockSetterTypeAndLiveIdMockRecorder
}

// MockSetterTypeAndLiveIdMockRecorder is the mock recorder for MockSetterTypeAndLiveId
type MockSetterTypeAndLiveIdMockRecorder struct {
	mock *MockSetterTypeAndLiveId
}

// NewMockSetterTypeAndLiveId creates a new mock instance
func NewMockSetterTypeAndLiveId(ctrl *gomock.Controller) *MockSetterTypeAndLiveId {
	mock := &MockSetterTypeAndLiveId{ctrl: ctrl}
	mock.recorder = &MockSetterTypeAndLiveIdMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSetterTypeAndLiveId) EXPECT() *MockSetterTypeAndLiveIdMockRecorder {
	return m.recorder
}

// SetTypeId mocks base method
func (m *MockSetterTypeAndLiveId) SetTypeId(tid dot.TypeId, lid dot.LiveId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTypeId", tid, lid)
}

// SetTypeId indicates an expected call of SetTypeId
func (mr *MockSetterTypeAndLiveIdMockRecorder) SetTypeId(tid, lid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTypeId", reflect.TypeOf((*MockSetterTypeAndLiveId)(nil).SetTypeId), tid, lid)
}

// MockAfterAllStarter is a mock of AfterAllStarter interface
type MockAfterAllStarter struct {
	ctrl     *gomock.Controller
	recorder *MockAfterAllStarterMockRecorder
}

// MockAfterAllStarterMockRecorder is the mock recorder for MockAfterAllStarter
type MockAfterAllStarterMockRecorder struct {
	mock *MockAfterAllStarter
}

// NewMockAfterAllStarter creates a new mock instance
func NewMockAfterAllStarter(ctrl *gomock.Controller) *MockAfterAllStarter {
	mock := &MockAfterAllStarter{ctrl: ctrl}
	mock.recorder = &MockAfterAllStarterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAfterAllStarter) EXPECT() *MockAfterAllStarterMockRecorder {
	return m.recorder
}

// AfterAllStart mocks base method
func (m *MockAfterAllStarter) AfterAllStart(l dot.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterAllStart", l)
}

// AfterAllStart indicates an expected call of AfterAllStart
func (mr *MockAfterAllStarterMockRecorder) AfterAllStart(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterAllStart", reflect.TypeOf((*MockAfterAllStarter)(nil).AfterAllStart), l)
}

// MockAfterAllInjecter is a mock of AfterAllInjecter interface
type MockAfterAllInjecter struct {
	ctrl     *gomock.Controller
	recorder *MockAfterAllInjecterMockRecorder
}

// MockAfterAllInjecterMockRecorder is the mock recorder for MockAfterAllInjecter
type MockAfterAllInjecterMockRecorder struct {
	mock *MockAfterAllInjecter
}

// NewMockAfterAllInjecter creates a new mock instance
func NewMockAfterAllInjecter(ctrl *gomock.Controller) *MockAfterAllInjecter {
	mock := &MockAfterAllInjecter{ctrl: ctrl}
	mock.recorder = &MockAfterAllInjecterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAfterAllInjecter) EXPECT() *MockAfterAllInjecterMockRecorder {
	return m.recorder
}

// AfterAllInject mocks base method
func (m *MockAfterAllInjecter) AfterAllInject(l dot.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterAllInject", l)
}

// AfterAllInject indicates an expected call of AfterAllInject
func (mr *MockAfterAllInjecterMockRecorder) AfterAllInject(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterAllInject", reflect.TypeOf((*MockAfterAllInjecter)(nil).AfterAllInject), l)
}

// MockAfterAllIDestroyer is a mock of AfterAllIDestroyer interface
type MockAfterAllIDestroyer struct {
	ctrl     *gomock.Controller
	recorder *MockAfterAllIDestroyerMockRecorder
}

// MockAfterAllIDestroyerMockRecorder is the mock recorder for MockAfterAllIDestroyer
type MockAfterAllIDestroyerMockRecorder struct {
	mock *MockAfterAllIDestroyer
}

// NewMockAfterAllIDestroyer creates a new mock instance
func NewMockAfterAllIDestroyer(ctrl *gomock.Controller) *MockAfterAllIDestroyer {
	mock := &MockAfterAllIDestroyer{ctrl: ctrl}
	mock.recorder = &MockAfterAllIDestroyerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAfterAllIDestroyer) EXPECT() *MockAfterAllIDestroyerMockRecorder {
	return m.recorder
}

// AfterAllIDestroy mocks base method
func (m *MockAfterAllIDestroyer) AfterAllIDestroy(l dot.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterAllIDestroy", l)
}

// AfterAllIDestroy indicates an expected call of AfterAllIDestroy
func (mr *MockAfterAllIDestroyerMockRecorder) AfterAllIDestroy(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterAllIDestroy", reflect.TypeOf((*MockAfterAllIDestroyer)(nil).AfterAllIDestroy), l)
}

// MockBeforeAllStopper is a mock of BeforeAllStopper interface
type MockBeforeAllStopper struct {
	ctrl     *gomock.Controller
	recorder *MockBeforeAllStopperMockRecorder
}

// MockBeforeAllStopperMockRecorder is the mock recorder for MockBeforeAllStopper
type MockBeforeAllStopperMockRecorder struct {
	mock *MockBeforeAllStopper
}

// NewMockBeforeAllStopper creates a new mock instance
func NewMockBeforeAllStopper(ctrl *gomock.Controller) *MockBeforeAllStopper {
	mock := &MockBeforeAllStopper{ctrl: ctrl}
	mock.recorder = &MockBeforeAllStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeforeAllStopper) EXPECT() *MockBeforeAllStopperMockRecorder {
	return m.recorder
}

// BeforeAllStop mocks base method
func (m *MockBeforeAllStopper) BeforeAllStop(l dot.Line) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeAllStop", l)
}

// BeforeAllStop indicates an expected call of BeforeAllStop
func (mr *MockBeforeAllStopperMockRecorder) BeforeAllStop(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeAllStop", reflect.TypeOf((*MockBeforeAllStopper)(nil).BeforeAllStop), l)
}
