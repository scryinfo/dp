// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/scryinfo/dot/dot"
	"github.com/stretchr/testify/mock"

	"reflect"
)

// Injecter is an autogenerated mock type for the Injecter type
type Injecter struct {
	mock.Mock
}

// GetByLiveId provides a mock function with given fields: id
func (m *Injecter) GetByLiveId(id dot.LiveId) (dot.Dot, error) {
	args := m.Called(id)
	return args.Get(0).(dot.Dot), args.Error(1)
}

// GetByType provides a mock function with given fields: t
func (m *Injecter) GetByType(t reflect.Type) (dot.Dot, error) {
	args := m.Called(t)
	return args.Get(0).(dot.Dot), args.Error(1)
	return nil, nil
}

// GetParent provides a mock function with given fields:
func (m *Injecter) GetParent() dot.Injecter {
	args := m.Called()
	return args.Get(0).(dot.Injecter)
}

// Inject provides a mock function with given fields: obj
func (m *Injecter) Inject(obj interface{}) error {
	args := m.Called(obj)
	return args.Error(0)
}

// RemoveByLiveId provides a mock function with given fields: id
func (m *Injecter) RemoveByLiveId(id dot.LiveId) error {
	args := m.Called(id)
	return args.Error(0)
}

// RemoveByType provides a mock function with given fields: t
func (m *Injecter) RemoveByType(t reflect.Type) error {
	args := m.Called(t)
	return args.Error(0)
}

// ReplaceOrAddByLiveId provides a mock function with given fields: d, id
func (m *Injecter) ReplaceOrAddByLiveId(d dot.Dot, id dot.LiveId) error {
	args := m.Called(d, id)
	return args.Error(0)
}

// ReplaceOrAddByParamType provides a mock function with given fields: d, t
func (m *Injecter) ReplaceOrAddByParamType(d dot.Dot, t reflect.Type) error {
	args := m.Called(d, t)
	return args.Error(0)
}

// ReplaceOrAddByType provides a mock function with given fields: d
func (m *Injecter) ReplaceOrAddByType(d dot.Dot) error {
	args := m.Called(d)
	return args.Error(0)
}

// SetParent provides a mock function with given fields: p
func (m *Injecter) SetParent(p dot.Injecter) {
	_ = m.Called(p)
}
