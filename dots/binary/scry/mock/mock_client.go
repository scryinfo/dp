// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go

// Package mock_scry is a generated GoMock package.
package mock_scry

import (
	common "github.com/ethereum/go-ethereum/common"
	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "github.com/golang/mock/gomock"
	auth "github.com/scryinfo/dp/dots/auth"
	event "github.com/scryinfo/dp/dots/eth/event"
	big "math/big"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockClient) Account() *auth.UserAccount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(*auth.UserAccount)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockClientMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockClient)(nil).Account))
}

// SubscribeEvent mocks base method
func (m *MockClient) SubscribeEvent(eventName string, callback event.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvent", eventName, callback)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeEvent indicates an expected call of SubscribeEvent
func (mr *MockClientMockRecorder) SubscribeEvent(eventName, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvent", reflect.TypeOf((*MockClient)(nil).SubscribeEvent), eventName, callback)
}

// UnSubscribeEvent mocks base method
func (m *MockClient) UnSubscribeEvent(eventName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribeEvent", eventName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnSubscribeEvent indicates an expected call of UnSubscribeEvent
func (mr *MockClientMockRecorder) UnSubscribeEvent(eventName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribeEvent", reflect.TypeOf((*MockClient)(nil).UnSubscribeEvent), eventName)
}

// Authenticate mocks base method
func (m *MockClient) Authenticate(password string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", password)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockClientMockRecorder) Authenticate(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockClient)(nil).Authenticate), password)
}

// TransferEthFrom mocks base method
func (m *MockClient) TransferEthFrom(from common.Address, password string, value *big.Int, ec *ethclient.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferEthFrom", from, password, value, ec)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferEthFrom indicates an expected call of TransferEthFrom
func (mr *MockClientMockRecorder) TransferEthFrom(from, password, value, ec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferEthFrom", reflect.TypeOf((*MockClient)(nil).TransferEthFrom), from, password, value, ec)
}

// GetEth mocks base method
func (m *MockClient) GetEth(owner common.Address, ec *ethclient.Client) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEth", owner, ec)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEth indicates an expected call of GetEth
func (mr *MockClientMockRecorder) GetEth(owner, ec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEth", reflect.TypeOf((*MockClient)(nil).GetEth), owner, ec)
}
