// source: VariFlightDataService.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto._proto.GetFlightDataAtOneAirportByStatusRequest', null, global);
goog.exportSymbol('proto._proto.GetFlightDataBetweenTwoAirportsRequest', null, global);
goog.exportSymbol('proto._proto.GetFlightDataBetweenTwoCitiesRequest', null, global);
goog.exportSymbol('proto._proto.GetFlightDataByFlightNumberRequest', null, global);
goog.exportSymbol('proto._proto.VariFlightData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto._proto.VariFlightData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto._proto.VariFlightData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto._proto.VariFlightData.displayName = 'proto._proto.VariFlightData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto._proto.GetFlightDataByFlightNumberRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto._proto.GetFlightDataByFlightNumberRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto._proto.GetFlightDataByFlightNumberRequest.displayName = 'proto._proto.GetFlightDataByFlightNumberRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto._proto.GetFlightDataBetweenTwoAirportsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto._proto.GetFlightDataBetweenTwoAirportsRequest.displayName = 'proto._proto.GetFlightDataBetweenTwoAirportsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto._proto.GetFlightDataBetweenTwoCitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto._proto.GetFlightDataBetweenTwoCitiesRequest.displayName = 'proto._proto.GetFlightDataBetweenTwoCitiesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto._proto.GetFlightDataAtOneAirportByStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto._proto.GetFlightDataAtOneAirportByStatusRequest.displayName = 'proto._proto.GetFlightDataAtOneAirportByStatusRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto._proto.VariFlightData.prototype.toObject = function(opt_includeInstance) {
  return proto._proto.VariFlightData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto._proto.VariFlightData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.VariFlightData.toObject = function(includeInstance, msg) {
  var f, obj = {
    fcategory: jspb.Message.getFieldWithDefault(msg, 1, ""),
    flightno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    flightcompany: jspb.Message.getFieldWithDefault(msg, 3, ""),
    flightdepcode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    flightarrcode: jspb.Message.getFieldWithDefault(msg, 5, ""),
    flightdeptimeplandate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    flightarrtimeplandate: jspb.Message.getFieldWithDefault(msg, 7, ""),
    flightdeptimedate: jspb.Message.getFieldWithDefault(msg, 8, ""),
    flightarrtimedate: jspb.Message.getFieldWithDefault(msg, 9, ""),
    flightstate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    flighthterminal: jspb.Message.getFieldWithDefault(msg, 11, ""),
    flightterminal: jspb.Message.getFieldWithDefault(msg, 12, ""),
    orgTimezone: jspb.Message.getFieldWithDefault(msg, 13, ""),
    dstTimezone: jspb.Message.getFieldWithDefault(msg, 14, ""),
    shareflightno: jspb.Message.getFieldWithDefault(msg, 15, ""),
    stopflag: jspb.Message.getFieldWithDefault(msg, 16, ""),
    shareflag: jspb.Message.getFieldWithDefault(msg, 17, ""),
    virtualflag: jspb.Message.getFieldWithDefault(msg, 18, ""),
    legflag: jspb.Message.getFieldWithDefault(msg, 19, ""),
    flightdep: jspb.Message.getFieldWithDefault(msg, 20, ""),
    flightarr: jspb.Message.getFieldWithDefault(msg, 21, ""),
    flightdepairport: jspb.Message.getFieldWithDefault(msg, 22, ""),
    flightarrairport: jspb.Message.getFieldWithDefault(msg, 23, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto._proto.VariFlightData}
 */
proto._proto.VariFlightData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto._proto.VariFlightData;
  return proto._proto.VariFlightData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto._proto.VariFlightData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto._proto.VariFlightData}
 */
proto._proto.VariFlightData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFcategory(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightcompany(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightdepcode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightarrcode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightdeptimeplandate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightarrtimeplandate(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightdeptimedate(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightarrtimedate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightstate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlighthterminal(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightterminal(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgTimezone(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDstTimezone(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareflightno(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setStopflag(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareflag(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setVirtualflag(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setLegflag(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightdep(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightarr(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightdepairport(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightarrairport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto._proto.VariFlightData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto._proto.VariFlightData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto._proto.VariFlightData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.VariFlightData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFcategory();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFlightno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFlightcompany();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFlightdepcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFlightarrcode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFlightdeptimeplandate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFlightarrtimeplandate();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getFlightdeptimedate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFlightarrtimedate();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFlightstate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getFlighthterminal();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getFlightterminal();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getOrgTimezone();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getDstTimezone();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getShareflightno();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getStopflag();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getShareflag();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getVirtualflag();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getLegflag();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getFlightdep();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getFlightarr();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getFlightdepairport();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getFlightarrairport();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
};


/**
 * optional string fcategory = 1;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFcategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFcategory = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string FlightNo = 2;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightno = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string FlightCompany = 3;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightcompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightcompany = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string FlightDepcode = 4;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightdepcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightdepcode = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string FlightArrcode = 5;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightarrcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightarrcode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string FlightDeptimePlanDate = 6;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightdeptimeplandate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightdeptimeplandate = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string FlightArrtimePlanDate = 7;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightarrtimeplandate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightarrtimeplandate = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string FlightDeptimeDate = 8;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightdeptimedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightdeptimedate = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string FlightArrtimeDate = 9;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightarrtimedate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightarrtimedate = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string FlightState = 10;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightstate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightstate = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string FlightHTerminal = 11;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlighthterminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlighthterminal = function(value) {
  jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string FlightTerminal = 12;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightterminal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightterminal = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string org_timezone = 13;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getOrgTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setOrgTimezone = function(value) {
  jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string dst_timezone = 14;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getDstTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setDstTimezone = function(value) {
  jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string ShareFlightNo = 15;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getShareflightno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setShareflightno = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string StopFlag = 16;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getStopflag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setStopflag = function(value) {
  jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string ShareFlag = 17;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getShareflag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setShareflag = function(value) {
  jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string VirtualFlag = 18;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getVirtualflag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setVirtualflag = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string LegFlag = 19;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getLegflag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setLegflag = function(value) {
  jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string FlightDep = 20;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightdep = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightdep = function(value) {
  jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string FlightArr = 21;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightarr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightarr = function(value) {
  jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string FlightDepAirport = 22;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightdepairport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightdepairport = function(value) {
  jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string FlightArrAirport = 23;
 * @return {string}
 */
proto._proto.VariFlightData.prototype.getFlightarrairport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/** @param {string} value */
proto._proto.VariFlightData.prototype.setFlightarrairport = function(value) {
  jspb.Message.setProto3StringField(this, 23, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto._proto.GetFlightDataByFlightNumberRequest.prototype.toObject = function(opt_includeInstance) {
  return proto._proto.GetFlightDataByFlightNumberRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto._proto.GetFlightDataByFlightNumberRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataByFlightNumberRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    flightnumber: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto._proto.GetFlightDataByFlightNumberRequest}
 */
proto._proto.GetFlightDataByFlightNumberRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto._proto.GetFlightDataByFlightNumberRequest;
  return proto._proto.GetFlightDataByFlightNumberRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto._proto.GetFlightDataByFlightNumberRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto._proto.GetFlightDataByFlightNumberRequest}
 */
proto._proto.GetFlightDataByFlightNumberRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlightnumber(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto._proto.GetFlightDataByFlightNumberRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto._proto.GetFlightDataByFlightNumberRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto._proto.GetFlightDataByFlightNumberRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataByFlightNumberRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFlightnumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string flightNumber = 1;
 * @return {string}
 */
proto._proto.GetFlightDataByFlightNumberRequest.prototype.getFlightnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataByFlightNumberRequest.prototype.setFlightnumber = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string date = 2;
 * @return {string}
 */
proto._proto.GetFlightDataByFlightNumberRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataByFlightNumberRequest.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto._proto.GetFlightDataBetweenTwoAirportsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto._proto.GetFlightDataBetweenTwoAirportsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    departureairport: jspb.Message.getFieldWithDefault(msg, 1, ""),
    arrivalairport: jspb.Message.getFieldWithDefault(msg, 2, ""),
    date: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto._proto.GetFlightDataBetweenTwoAirportsRequest}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto._proto.GetFlightDataBetweenTwoAirportsRequest;
  return proto._proto.GetFlightDataBetweenTwoAirportsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto._proto.GetFlightDataBetweenTwoAirportsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto._proto.GetFlightDataBetweenTwoAirportsRequest}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepartureairport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArrivalairport(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto._proto.GetFlightDataBetweenTwoAirportsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto._proto.GetFlightDataBetweenTwoAirportsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDepartureairport();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArrivalairport();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string departureAirport = 1;
 * @return {string}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.getDepartureairport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.setDepartureairport = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string arrivalAirport = 2;
 * @return {string}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.getArrivalairport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.setArrivalairport = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataBetweenTwoAirportsRequest.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto._proto.GetFlightDataBetweenTwoCitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto._proto.GetFlightDataBetweenTwoCitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    departurecity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    arrivalcity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    date: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto._proto.GetFlightDataBetweenTwoCitiesRequest}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto._proto.GetFlightDataBetweenTwoCitiesRequest;
  return proto._proto.GetFlightDataBetweenTwoCitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto._proto.GetFlightDataBetweenTwoCitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto._proto.GetFlightDataBetweenTwoCitiesRequest}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeparturecity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArrivalcity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto._proto.GetFlightDataBetweenTwoCitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto._proto.GetFlightDataBetweenTwoCitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeparturecity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArrivalcity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string departureCity = 1;
 * @return {string}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.getDeparturecity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.setDeparturecity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string arrivalCity = 2;
 * @return {string}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.getArrivalcity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.setArrivalcity = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataBetweenTwoCitiesRequest.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto._proto.GetFlightDataAtOneAirportByStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto._proto.GetFlightDataAtOneAirportByStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    airport: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    date: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto._proto.GetFlightDataAtOneAirportByStatusRequest}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto._proto.GetFlightDataAtOneAirportByStatusRequest;
  return proto._proto.GetFlightDataAtOneAirportByStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto._proto.GetFlightDataAtOneAirportByStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto._proto.GetFlightDataAtOneAirportByStatusRequest}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAirport(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto._proto.GetFlightDataAtOneAirportByStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto._proto.GetFlightDataAtOneAirportByStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAirport();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string airport = 1;
 * @return {string}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.getAirport = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.setAirport = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string date = 3;
 * @return {string}
 */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.getDate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto._proto.GetFlightDataAtOneAirportByStatusRequest.prototype.setDate = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto._proto);
